---
description: 
globs: 
alwaysApply: false
---
# Feature: Level Editor Implementation

**Goal:** Create a functional level editor allowing manual placement and configuration of game entities (platforms, enemies, crates, barrels, finish line) and saving/loading levels in JSON format.

## Implementation Steps

1.  **Setup Editor Structure:**
    - Task: Create the `src/editor/` directory and subdirectories (`scenes/`, `ui/`, `lib/`). Create the main editor scene file (`src/editor/scenes/EditorScene.ts`).
    - Outcome: Basic directory structure and editor scene file exist.
    - Status: TODO
    - Summary: -

2.  **Configure Editor Launch:**
    - Task: Add a script to `package.json` (e.g., `"editor": "vite --config vite.config.editor.js"` or similar) to launch the editor. This might involve a separate Vite config or entry point (`index.editor.html`?) targeting `EditorScene`.
    - Outcome: `pnpm run editor` successfully launches the editor environment/scene.
    - Status: TODO
    - Summary: -

3.  **Implement Basic Editor Scene:**
    - Task: Initialize `EditorScene.ts`. Set up a basic camera (possibly with drag controls for panning). Load necessary assets for entity visualization.
    - Outcome: Editor scene loads, displays a background, and allows basic camera panning.
    - Status: TODO
    - Summary: -

4.  **Create Entity Palette UI:**
    - Task: Build a UI component (`src/editor/ui/Palette.ts`?) displaying buttons/icons for each placeable entity type (Platform, Enemy types, CrateSmall, CrateBig, Barrel, FinishLine).
    - Outcome: Palette UI is visible in the editor. Clicking an item selects it for placement.
    - Status: TODO
    - Summary: -

5.  **Implement Object Placement:**
    - Task: Add logic to `EditorScene` to handle pointer clicks on the canvas. When an entity type is selected in the palette, clicking the canvas should create and place a visual representation of that entity at the click coordinates.
    - Outcome: Users can select an entity from the palette and click to place instances in the editor scene.
    - Status: TODO
    - Summary: -

6.  **Implement Object Selection & Movement:**
    - Task: Add logic to select already placed objects (e.g., by clicking on them). Implement dragging functionality to move selected objects.
    - Outcome: Users can click to select placed objects and drag them to new positions.
    - Status: TODO
    - Summary: -

7.  **Implement Property Inspector UI:**
    - Task: Create a UI panel (`src/editor/ui/Inspector.ts`?) that displays properties of the currently selected object. Initially, focus on Platform `segmentCount` and `orientation`.
    - Outcome: Inspector panel shows contextually relevant properties.
    - Status: TODO
    - Summary: -

8.  **Implement Platform Configuration:**
    - Task: Add controls (e.g., input fields, buttons) to the Inspector UI to modify `segmentCount` and `orientation` for selected platforms. Update the visual representation and stored data of the platform accordingly.
    - Outcome: Users can select a platform and change its segment count and orientation via the UI.
    - Status: TODO
    - Summary: -

9.  **Implement Save Functionality:**
    - Task: Create `src/editor/lib/LevelData.ts` with a `saveLevel` function. Add a "Save" button to the UI. Clicking it should gather data for all placed objects (position, type, properties like `segmentCount`/`orientation`) from the `EditorScene`, format it according to the agreed JSON structure, and trigger a download of the JSON file.
    - Outcome: Users can click "Save" to download a JSON file representing the current level layout.
    - Status: TODO
    - Summary: -

10. **Implement Load Functionality:**
    - Task: Add a "Load" button and potentially a file input element. Clicking "Load" should allow the user to select a JSON file. Parse the file using `LevelData.ts` (`loadLevel` function), clear the current editor scene, and populate it with objects based on the loaded data.
    - Outcome: Users can load a previously saved level JSON file into the editor.
    - Status: TODO
    - Summary: -

11. **Integrate Levels into Game:**
    - Task: Modify `src/scenes/Game.ts` to remove procedural generation. Add logic to fetch/load a specific level JSON file. Parse the JSON and instantiate the corresponding entities (Platforms, Enemies, Crates, Barrels, FinishLine) using their respective classes from `src/entities/`.
    - Outcome: The game scene can load and display a level defined by a JSON file.
    - Status: TODO
    - Summary: -

12. **Adapt Game Mechanics & Implement Coin Placement:**
    - Task: Ensure mechanics like death zones, crate respawning, etc., function correctly with the manually loaded level structure. **Repurpose `LevelGenerator.ts` for coin placement:** Strip unused generation methods. Create/modify a method (e.g., `placeCoinsOnPlatforms`) that takes the loaded platforms and potentially enemy/crate data. Implement logic within this method to iterate through platforms, check if they contain enemies or crates (based on proximity/collision with loaded enemy/crate positions), and if clear, place coins using existing spacing logic. Call this method from `Game.ts` *after* loading other entities.
    - Outcome: Core gameplay mechanics work as expected on levels loaded from the editor. Coins are placed correctly only on platforms without enemies/crates.
    - Status: TODO
    - Summary: -

13. **Refine and Test:**
    - Task: Test editor usability, save/load reliability, and game integration. Add refinements like grid snapping, better visualization, etc.
    - Outcome: Editor is stable and usable; game correctly plays editor-created levels.
    - Status: TODO
    - Summary: -

14. **Update Memory Bank:**
    - Task: Document the final editor implementation details, UI components, data flow, and game integration steps in all relevant memory bank files.
    - Outcome: Memory bank accurately reflects the completed Level Editor feature.
    - Status: TODO
    - Summary: -
