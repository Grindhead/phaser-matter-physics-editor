var e=Object.defineProperty,t=(t,s,i)=>((t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i)(t,"symbol"!=typeof s?s+"":s,i);import{p as s,P as i}from"./phaser-hyM8z1KO.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const a="Preloader",r="MainMenu",n="Game",o="DebugUIScene",l="assets",h="physics",c=1/0,d=1/0,m="waiting_to_start",u="playing",p="game_over",f="level_complete";class g extends s.Scene{constructor(){super("Boot")}preload(){}create(){this.scene.start(a)}}const y=e=>"coin"===e.label,v=e=>"duck"===e.label,x=e=>"finish"===e.label,C=e=>"enemy"===e.label,b=e=>"fallSensor"===e.label;let I=0,w=0;const A=()=>I,E=()=>{I=0},L=()=>{w=0};let M=0;const P=()=>M;class S{constructor(e,s){t(this,"scene"),t(this,"camera"),this.scene=e,this.camera=this.scene.cameras.main,this.setupCamera(s)}setupBounds(){this.scene.matter.world.setBounds(0,0,1e4,4e3),this.camera.setBounds(0,0,1e4,4e3)}setupCamera(e){this.setupBounds(),this.camera.startFollow(e,!0,.5,.5),this.camera.setLerp(.5,.5),this.camera.setZoom(1.5)}handleZoomIn(){this.scene.tweens.add({targets:this.camera,zoom:2,duration:700,ease:"Power2"})}}function _(e,t,s){Object.entries(s).forEach((([s,i])=>{i.frames<=1?e.create({key:s,frames:[{key:t,frame:i.prefix}],repeat:0}):e.create({key:s,frames:e.generateFrameNames(t,{prefix:i.prefix,start:1,end:i.frames,zeroPad:4,suffix:".png"}),repeat:i.loop,frameRate:i.frameRate})}))}const k=(e,t)=>{Object.entries(t).forEach((([t,s])=>{if(s.nextAnimation){const a=s.nextAnimation;e.on(i.Animations.Events.ANIMATION_COMPLETE,(s=>{s.key===t&&e.play(a)}))}}))},T=e=>{var t;const s=(null==(t=e.label)?void 0:t.toLowerCase())??"";return["platform","crate-big","crate-small"].includes(s)},G="DUCK_FALL",D="DUCK_IDLE",N="DUCK_RUN",O={DUCK_FALL:{prefix:"player/fall/duck-fall-",frames:10,loop:0,frameRate:30},DUCK_DEAD:{prefix:"player/dead/duck-dead-",frames:10,loop:0,frameRate:30},DUCK_IDLE:{prefix:"player/idle/duck-idle-",frames:10,loop:0,frameRate:30},DUCK_JUMP:{prefix:"player/jump/duck-jump-",frames:12,loop:0,nextAnimation:G,frameRate:30},DUCK_RUN:{prefix:"player/run/duck-run-",frames:14,loop:-1,frameRate:30}};class X extends Phaser.Physics.Matter.Sprite{constructor(e,s,i){const a=e.cache.json.get(h);super(e.matter.world,s,i,l,O[D].prefix+"0001.png",{shape:a["duck-idle"]}),t(this,"cursors"),t(this,"wasd"),t(this,"isGrounded",!1),t(this,"groundContacts",new Set),t(this,"currentAnimKey",""),t(this,"jumpInProgress",!1),t(this,"lastJumpTime",0),t(this,"isAlive",!0),t(this,"isLevelComplete",!1),t(this,"justLanded",!1),e.matter.world.on("collisionstart",this.handleCollisionStart,this),e.matter.world.on("collisionend",this.handleCollisionEnd,this),this.setFixedRotation(),this.setupControls(),this.playAnimation(D,!0),this.isAlive=!0,k(this,O),e.add.existing(this)}setupControls(){var e,t;this.scene.sys.game.device.os.desktop?(this.cursors=null==(e=this.scene.input.keyboard)?void 0:e.createCursorKeys(),this.wasd=null==(t=this.scene.input.keyboard)?void 0:t.addKeys("W,A,D")):this.createMobileControls()}createMobileControls(){}update(e,t){var s,i,a,r,n,o,l,h,c,d,m,u,p,f;if(!this.isAlive)return;if(!this.cursors||!this.wasd)return;const g=(null==(s=this.cursors.left)?void 0:s.isDown)||(null==(i=this.wasd.A)?void 0:i.isDown),y=(null==(a=this.cursors.right)?void 0:a.isDown)||(null==(r=this.wasd.D)?void 0:r.isDown),v=(null==(n=this.cursors.up)?void 0:n.isDown)||(null==(o=this.wasd.W)?void 0:o.isDown);if(!this.isLevelComplete){let e=0;if(g?(e=-3,this.flipX=!0):y&&(e=3,this.flipX=!1),this.setVelocityX(e),v&&this.isGrounded)return this.setVelocityY(-8),this.jumpInProgress=!0,this.lastJumpTime=this.scene.time.now,this.playAnimation("DUCK_JUMP",!0),void this.once(Phaser.Animations.Events.ANIMATION_COMPLETE,(()=>{this.isGrounded||this.playAnimation(G,!0)}))}if(this.isGrounded){if(this.isGrounded&&!this.jumpInProgress)if(this.justLanded){const e=(null==(h=null==(l=this.cursors)?void 0:l.left)?void 0:h.isDown)||(null==(d=null==(c=this.wasd)?void 0:c.A)?void 0:d.isDown),t=(null==(u=null==(m=this.cursors)?void 0:m.right)?void 0:u.isDown)||(null==(f=null==(p=this.wasd)?void 0:p.D)?void 0:f.isDown);e||t?this.playAnimation(N):this.playAnimation(D,!1),this.justLanded=!1}else this.isLevelComplete?this.playAnimation(D,!1):this.body&&Math.abs(this.body.velocity.x)>.1?this.playAnimation(N):this.playAnimation(D,!1)}else this.jumpInProgress||this.currentAnimKey!==G&&this.scene.time.now-this.lastJumpTime>150&&this.playAnimation(G)}playAnimation(e,t=!1){if(this.currentAnimKey===e){if(!t)return;this.anims.stop()}this.play(e),this.currentAnimKey=e}handleCollisionStart(e){for(const{bodyA:s,bodyB:i}of e.pairs)v(s)&&T(i)?this.groundContacts.add(i):v(i)&&T(s)&&this.groundContacts.add(s);const t=this.isGrounded;this.isGrounded=this.groundContacts.size>0,this.isGrounded&&!t&&(this.jumpInProgress=!1,this.justLanded=!0)}handleCollisionEnd(e){for(const{bodyA:t,bodyB:s}of e.pairs)v(t)&&T(s)?this.groundContacts.delete(s):v(s)&&T(t)&&this.groundContacts.delete(t);this.isGrounded=this.groundContacts.size>0}finishLevel(){this.isLevelComplete=!0,this.setVelocityX(0)}kill(){this.isAlive=!1,this.playAnimation("DUCK_DEAD"),this.setVelocityX(0),this.setVelocityY(0),this.setStatic(!0)}}const F={ENEMY_IDLE:{prefix:"enemy/enemy.png",frames:10,loop:0,frameRate:0}},H=class e extends Phaser.Physics.Matter.Sprite{constructor(e,s,i){const a=e.cache.json.get(h);super(e.matter.world,s,i,l,F.ENEMY_IDLE.prefix,{shape:a.enemy}),t(this,"speed",2),t(this,"direction",1),t(this,"platformBounds"),e.add.existing(this),e.matter.world.on("collisionstart",this.handleCollisionStart,this),this.setFixedRotation()}handleGameOver(){this.setVelocity(0,0)}update(){if(!this.platformBounds)return;this.setVelocity(this.speed*this.direction,0);const{left:e,right:t}=this.getBounds(),{left:s,right:i}=this.platformBounds;t>=i&&1===this.direction?this.direction=-1:e<=s&&-1===this.direction&&(this.direction=1)}handleCollisionStart(t){if(this.platformBounds)return;const s=this.body,i=s.id,a=s.parts?s.parts.map((e=>e.id)):[i];a.includes(i)||a.push(i);for(const{bodyA:r,bodyB:n}of t.pairs){let t=null,s=null;if(a.includes(r.id)&&T(n)?(t=r,s=n):a.includes(n.id)&&T(r)&&(t=n,s=r),t&&s){const t=s.id,i=e.platformCache.get(t);if(i)this.platformBounds=i;else{const{min:i,max:a}=s.bounds,r={left:i.x,right:a.x};e.platformCache.set(t,r),this.platformBounds=r}this.scene.matter.world.off("collisionstart",this.handleCollisionStart,this);break}}}};t(H,"platformCache",new Map);let B=H;const U="COIN_IDLE",R="COIN_COLLECT",j={COIN_IDLE:{prefix:"coin/coin-idle/coin-idle-",frames:23,loop:-1,frameRate:30},COIN_COLLECT:{prefix:"coin/coin-collect/coin-collect-",frames:8,loop:0,frameRate:30}};class V extends Phaser.Physics.Matter.Sprite{constructor(e,t,s){const i=e.cache.json.get(h);super(e.matter.world,t,s,l,j[U].prefix+"0001.png",{shape:i.coin,isStatic:!0,isSensor:!0}),this.play(U),e.add.existing(this)}collect(){this.play(R),this.scene.matter.world.remove(this),this.once(Phaser.Animations.Events.ANIMATION_COMPLETE,(()=>{var e;(null==(e=this.anims.currentAnim)?void 0:e.key)===R&&this.destroy(!0)}))}}const Y={LEFT:{prefix:"platforms/platform-left.png",frames:1,loop:0,frameRate:0},RIGHT:{prefix:"platforms/platform-right.png",frames:1,loop:0,frameRate:0},MIDDLE:{prefix:"platforms/platform-middle.png",frames:1,loop:0,frameRate:0}};class K extends Phaser.Physics.Matter.Sprite{constructor(e,s,i,a,r){((e,t,s)=>{if(e.textures.exists(s)){const i=e.make.renderTexture({width:26*t,height:24},!1);return i.draw(s,0,0),i}(function(e,t,s){const i=e.make.container({x:0,y:0,add:!1}),a=26*t,r=e.make.image({key:l,frame:Y.LEFT.prefix,x:13,y:12,add:!1}),n=e.make.tileSprite({key:l,frame:Y.MIDDLE.prefix,x:26*t/2,y:13.5,width:26*(t-2),height:24,add:!1}),o=e.make.image({key:l,frame:Y.RIGHT.prefix,x:a-13,y:12,add:!1});i.add([r,n,o]);const h=e.make.renderTexture({width:a,height:24},!1);h.draw(i),h.saveTexture(s),i.destroy()})(e,t,s)})(e,a,r);const n=e.cache.json.get(h).platform,{collisionFilter:o}=n,c={label:"platform",isStatic:n.isStatic,collisionFilter:{category:o.category,group:o.group,mask:o.mask}};super(e.matter.world,s,i,r,void 0,c),t(this,"segmentCount"),this.segmentCount=a,e.add.existing(this)}}const z={CRATE_BIG_IDLE:{prefix:"crate/crate-big.png",frames:1,loop:0,frameRate:0}};class W extends Phaser.Physics.Matter.Sprite{constructor(e,t,s){const i=e.cache.json.get(h);super(e.matter.world,t,s,l,z.CRATE_BIG_IDLE.prefix,{shape:i["crate-big"]}),e.add.existing(this)}}const $={CRATE_SMALL_IDLE:{prefix:"crate/crate-small.png",frames:1,loop:0,frameRate:0}};class J extends Phaser.Physics.Matter.Sprite{constructor(e,t,s){const i=e.cache.json.get(h);super(e.matter.world,t,s,l,$.CRATE_SMALL_IDLE.prefix,{shape:i["crate-small"]}),e.add.existing(this)}}const Z={FINISH_IDLE:{prefix:"finish/finish-idle/finish-idle.png",frames:0,loop:0,frameRate:0},FINISH_ACTIVATED:{prefix:"finish/finish-activated/finish-activated-",frames:19,loop:0,nextAnimation:"FINISH_ACTIVE",frameRate:30},FINISH_ACTIVE:{prefix:"finish/finish-active/finish-active-",frames:8,loop:-1,frameRate:30}};class Q extends Phaser.Physics.Matter.Sprite{constructor(e,s,i){const a=e.cache.json.get(h);super(e.matter.world,s,i,l,Z.FINISH_IDLE.prefix,{shape:a.finish,isStatic:!0,isSensor:!0}),t(this,"isActivated",!1),k(this,Z),e.add.existing(this)}activate(){this.isActivated||(this.play("FINISH_ACTIVATED"),this.isActivated=!0)}}class q{constructor(e){t(this,"seed"),this.seed=e}next(){let e=this.seed+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296}nextInt(e,t){return Math.floor(this.next()*(t-e)+e)}choice(e){return e[this.nextInt(0,e.length)]}}class ee{constructor(e,s){t(this,"scene"),t(this,"levelNumber"),t(this,"prng"),t(this,"platforms",[]),t(this,"coins",[]),t(this,"enemies",[]),t(this,"crates",[]),t(this,"player"),t(this,"levelMinX",0),t(this,"levelMaxX",0),t(this,"levelLowestY",0),t(this,"MAX_JUMP_DISTANCE_X",200),t(this,"MAX_JUMP_HEIGHT_UP",120),t(this,"MAX_FALL_HEIGHT",400),t(this,"COIN_HEIGHT",28),t(this,"ENEMY_HEIGHT",40),t(this,"CRATE_SMALL_HEIGHT",32),t(this,"CRATE_BIG_HEIGHT",64),t(this,"PLATFORM_DISPLAY_HEIGHT",32),t(this,"MIN_PLATFORM_LENGTH_WITH_ENEMY",10),t(this,"MIN_COIN_SPACING",64),this.scene=e,this.levelNumber=s,this.prng=new q(this.levelNumber)}generateLevel(){const e=this.getLevelGenerationParams(),t=this.prng.nextInt(e.minPlatforms,e.maxPlatforms+1);let s={x:180,y:300},i=0,a=null;const r=[];this.platforms=[],this.enemies=[],this.coins=[],this.crates=[],this.createPlayerStart(s);for(let o=0;o<t;o++){let t=e.minPlatformLength;const n=e.maxPlatformLength;t>n&&(t=n);const l=this.prng.nextInt(t,n+1);s=this.calculateNextPlatformPosition(s,l,a,e);const h=this.createPlatform(s,l,o);i+=this.populatePlatformWithCoins(h),o>0&&r.push(h),a=h}const n=r.filter((e=>e!==a));if(this.placeEnemiesAndCrates(n,e),this.createFinishPoint(a),this.calculateOverallBounds(),console.log(`Level generated with ${this.platforms.length} platforms, ${this.enemies.length} enemies, ${this.crates.length} crates, ${i} coins.`),!this.player)throw new Error("Level Generator: Player was not created!");return w=i,this.player}getLevelGenerationParams(){const e=10+this.levelNumber,t=15+this.levelNumber,s=.3+Math.min(.3,.02*this.levelNumber),i=.25+Math.min(.2,.01*this.levelNumber),a=(e+t)/2,r=Math.floor(a*s),n=Math.floor(a*i);return{minPlatforms:e,maxPlatforms:t,minPlatformLength:4,maxPlatformLength:12,minHorizontalGap:120,maxHorizontalGap:this.MAX_JUMP_DISTANCE_X,minVerticalGap:-this.MAX_JUMP_HEIGHT_UP,maxVerticalGap:this.MAX_FALL_HEIGHT,enemyProbability:s,crateProbability:i,requiredCoins:100,targetEnemies:r,targetCrates:n}}createPlayerStart(e){this.player=new X(this.scene,e.x,e.y-50-this.PLATFORM_DISPLAY_HEIGHT/2)}calculateNextPlatformPosition(e,t,s,i){let a=e.x,r=e.y;const n=16*t/2;if(s){const e=s.getBounds();let t=this.prng.nextInt(i.minHorizontalGap,i.maxHorizontalGap+1),o=this.prng.nextInt(i.minVerticalGap,i.maxVerticalGap+1);t=Math.min(t,this.MAX_JUMP_DISTANCE_X),o<0&&(o=Math.max(o,-this.MAX_JUMP_HEIGHT_UP));const l=20;Math.abs(o)<l&&(o=o>=0?l:-20,o=Phaser.Math.Clamp(o,i.minVerticalGap,i.maxVerticalGap)),a=e.right+t+n,r=s.y+o}return{x:a,y:r}}createPlatform(e,t,s){const i=new K(this.scene,e.x,e.y,t,0===s?"start":s===t-1?"end":"middle");return this.platforms.push(i),i}populatePlatformWithCoins(e){const t=e.getBounds(),s=t.width;let i=0;const a=Math.floor(s/this.MIN_COIN_SPACING),r=this.prng.nextInt(0,a+1);if(r>0){const e=(s-(r-1)*this.MIN_COIN_SPACING)/2,a=t.top-this.COIN_HEIGHT/2-5;for(let s=0;s<r;s++){const r=t.left+e+s*this.MIN_COIN_SPACING,n=16;if(Math.abs(r-t.centerX)<n)continue;const o=new V(this.scene,r,a);this.coins.push(o),i++}}return i}placeEnemiesAndCrates(e,t){if(0===e.length)return;const s=this.shuffleArray([...e]),i=Math.min(t.targetEnemies,s.length),a=Math.min(t.targetCrates,s.length-i);let r=0;for(let n=0;n<i&&r<s.length;n++){const e=s[r++],t=e.getBounds(),i=t.centerX,a=t.top-this.ENEMY_HEIGHT/2;if(e.segmentCount<this.MIN_PLATFORM_LENGTH_WITH_ENEMY){n--;continue}const o=new B(this.scene,i,a);this.enemies.push(o)}for(let n=0;n<a&&r<s.length;n++){const e=s[r++].getBounds(),t=e.centerX,i=this.prng.next()<.5,a=i?this.CRATE_BIG_HEIGHT:this.CRATE_SMALL_HEIGHT,n=e.top-a/2,o=i?new W(this.scene,t,n):new J(this.scene,t,n);this.crates.push(o)}}createFinishPoint(e){if(!e)return;const t=e.getBounds(),s=t.right-16,i=t.top-60;new Q(this.scene,s,i)}calculateOverallBounds(){if(0===this.platforms.length)return this.levelMinX=0,this.levelMaxX=1e3,this.levelLowestY=1/0,void console.warn("LevelGenerator: No platforms generated, using default bounds.");const e=this.platforms[0].getBounds();this.levelMinX=e.left,this.levelMaxX=e.right,this.levelLowestY=e.bottom;for(let t=1;t<this.platforms.length;t++){const e=this.platforms[t].getBounds();this.levelMinX=Math.min(this.levelMinX,e.left),this.levelMaxX=Math.max(this.levelMaxX,e.right),this.levelLowestY=Math.max(this.levelLowestY,e.bottom)}}getEnemies(){return this.enemies}getPlatforms(){return this.platforms}getCoins(){return this.coins}getCrates(){return this.crates}getOverallLevelBounds(){return{minX:this.levelMinX,maxX:this.levelMaxX,lowestY:this.levelLowestY}}shuffleArray(e){for(let t=e.length-1;t>0;t--){const s=this.prng.nextInt(0,t+1);[e[t],e[s]]=[e[s],e[t]]}return e}}class te{constructor(e){t(this,"scene"),t(this,"backgroundLayer"),t(this,"middleLayer"),t(this,"foregroundLayer"),t(this,"levelWidth",0),t(this,"bgScrollFactorX"),t(this,"midScrollFactorX"),t(this,"fgScrollFactorX"),this.scene=e}initialize(e){this.levelWidth=Math.max(e,this.scene.scale.width),this.createLayers()}createLayers(){const e=this.scene.scale.height;this.bgScrollFactorX=.2,this.midScrollFactorX=1.5,this.fgScrollFactorX=2;const t=(t,s,i,a)=>{const r=this.scene.textures.get(t).getSourceImage().height*a,n=e-r+i,o=this.scene.add.tileSprite(0,n,this.levelWidth,r,t);return o.setOrigin(0,0),o.setDepth(s),o.setScrollFactor(0,0),o.tileScaleY=a,o.tileScaleX=a,o};this.backgroundLayer=t("background",-3,0,1),this.middleLayer=t("middleground",-2,-150,.32),this.foregroundLayer=t("foreground",1,-80,.5)}update(){if(!this.backgroundLayer||!this.middleLayer||!this.foregroundLayer)return;const e=this.scene.cameras.main.scrollX;this.backgroundLayer.tilePositionX=e*this.bgScrollFactorX,this.middleLayer.tilePositionX=e*this.midScrollFactorX,this.foregroundLayer.tilePositionX=e*this.fgScrollFactorX}}class se extends s.Scene{constructor(){super(n),t(this,"player"),t(this,"overlayButton"),t(this,"restartTriggered",!1),t(this,"physicsEnabled",!1),t(this,"gameState",m),t(this,"enemies",[]),t(this,"cameraManager"),t(this,"levelGenerator"),t(this,"parallaxManager"),t(this,"checkCollisions",(({pairs:e})=>{for(const{bodyA:t,bodyB:s}of e)if(this.checkFallSensorCollision(t,s)||this.checkCoinCollision(t,s)||this.checkFinishCollision(t,s)||this.checkEnemyCollision(t,s))return}))}create(){this.parallaxManager=new te(this),this.setupWorldBounds(),this.initGame(),this.showUIOverlay(m),this.scene.launch(o)}setupWorldBounds(){this.matter.world.setBounds(0,0,c,d),this.matter.world.enabled=!1}initGame(){if(E(),L(),0===P()&&(M=1),this.enemies=[],this.generateLevelEntities(),this.setupCollisions(),!this.player)throw new Error("Player not created during level generation!");this.cameraManager=new S(this,this.player)}generateLevelEntities(){const e=P();this.levelGenerator=new ee(this,e),this.player=this.levelGenerator.generateLevel(),this.enemies=this.levelGenerator.getEnemies();const t=this.levelGenerator.getOverallLevelBounds(),{minX:s,maxX:i,lowestY:a}=t,r=s===-1/0?0:s,n=i===1/0?r:i,o=Math.max(n-r,this.scale.width);this.parallaxManager&&this.parallaxManager.initialize(o);const l=o+1e3,h=r+(n-r)/2;this.createFallSensor(a,h,l)}showUIOverlay(e,t=!0){if(this.overlayButton&&(this.overlayButton.destroy(),this.overlayButton=void 0),e===u)return void(this.gameState=e);const s=this.game.canvas.width/2,i=this.game.canvas.height/2;let a,r;switch(e){case m:a="ui/start.png",r=()=>{var e;null==(e=this.overlayButton)||e.destroy(),this.overlayButton=void 0,this.startGame()};break;case p:a="ui/game-over.png",r=()=>{this.restartTriggered||this.restartLevel()};break;case f:a="ui/start.png",r=()=>{this.restartTriggered||this.restartLevel()};break;default:return}this.overlayButton=this.add.image(s,i,l,a).setOrigin(.5).setScrollFactor(0).setDepth(1e3).setInteractive({useHandCursor:!0}),t&&(this.overlayButton.setAlpha(0),this.tweens.add({targets:this.overlayButton,alpha:1,duration:400,ease:"Power2"})),this.overlayButton.on("pointerup",r),this.gameState=e}startGame(){this.matter.world.enabled=!0,this.restartTriggered=!1,this.physicsEnabled=!0,this.showUIOverlay(u)}createFallSensor(e,t,s){const i=e+500+50;this.matter.add.rectangle(t,i,s,100,{isSensor:!0,isStatic:!0,label:"fallSensor",collisionFilter:{group:0,category:16,mask:23}})}setupCollisions(){this.matter.world.on("collisionstart",(e=>{this.physicsEnabled&&this.checkCollisions(e)}))}checkFallSensorCollision(e,t){return!!(b(e)&&v(t)||b(t)&&v(e))&&(this.handleGameOver(),!0)}checkEnemyCollision(e,t){return!!(C(e)&&v(t)||C(t)&&v(e))&&(this.handleGameOver(),!0)}checkFinishCollision(e,t){return!!(x(e)&&v(t)||x(t)&&v(e))&&(x(e)?e.gameObject.activate():x(t)&&t.gameObject.activate(),this.handleLevelComplete(),!0)}checkCoinCollision(e,t){return y(e)&&v(t)?(this.collectCoin(e),!0):!(!y(t)||!v(e)||(this.collectCoin(t),0))}collectCoin(e){const t=e.gameObject;var s;null==t||t.collect(),s=A()+1,I=s}update(e,t){var i;if(null==(i=this.parallaxManager)||i.update(),!this.physicsEnabled)return;this.player.update(e,t),this.enemies.forEach((e=>e.update())),this.scene.isActive(o)&&this.events.emit("updateDebugData",{playerX:this.player.x,playerY:this.player.y,platformCount:this.levelGenerator.getPlatforms().length,enemyCount:this.enemies.length,coinCount:this.levelGenerator.getCoins().length,crateCount:this.levelGenerator.getCrates().length});const a=this.cameras.main.worldView,r=new s.Geom.Rectangle(a.x-100,a.y-100,a.width+200,a.height+200);this.levelGenerator.getCoins().forEach((e=>{if(!e.body)return;const t=s.Geom.Rectangle.Contains(r,e.body.position.x,e.body.position.y);e.setVisible(t),t?e.setAwake():e.setToSleep()})),this.enemies.forEach((e=>{if(!e.body)return;const t=s.Geom.Rectangle.Contains(r,e.body.position.x,e.body.position.y);e.setVisible(t),t?e.setAwake():e.setToSleep()}))}handleGameOver(){this.gameState===u&&(this.player.kill(),this.physicsEnabled=!1,this.enemies.forEach((e=>e.handleGameOver())),this.cameraManager.handleZoomIn(),this.showUIOverlay(p))}handleLevelComplete(){this.gameState===u&&(this.player.finishLevel(),((e=1)=>{M+=e})(1),this.enemies.forEach((e=>e.handleGameOver())),this.cameraManager.handleZoomIn(),this.showUIOverlay(f))}restartLevel(){this.restartTriggered||(this.restartTriggered=!0,this.physicsEnabled=!1,this.matter.world.enabled=!1,this.scene.isActive(o)&&this.scene.stop(o),this.scene.restart(),E(),L())}}class ie extends s.Scene{constructor(){super("GameOver"),t(this,"camera"),t(this,"background"),t(this,"gameover_text")}create(){this.background=this.add.image(512,384,"background"),this.background.setAlpha(.5),this.gameover_text=this.add.text(512,384,"Game Over",{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}),this.gameover_text.setOrigin(.5),this.gameover_text.setInteractive(),this.gameover_text.once("pointerdown",(()=>{this.scene.start(n)}))}}class ae extends s.Scene{constructor(){super(r),t(this,"background"),t(this,"logo"),t(this,"title")}create(){this.background=this.add.image(512,384,"background"),this.title=this.add.text(512,460,"Main Menu",{fontFamily:"Arial Black",fontSize:38,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start(n)}))}}class re extends s.Scene{constructor(){super(a)}init(){this.add.image(512,384,"background"),this.add.rectangle(512,384,468,32).setStrokeStyle(1,16777215);const e=this.add.rectangle(282,384,4,28,16777215);this.load.on("progress",(t=>{e.width=4+460*t}))}preload(){this.load.setPath("assets"),this.load.atlas(l,"assets.png","assets.json"),this.load.json(h,"physics.json"),this.load.image("background","background.png"),this.load.image("middleground","middle.png"),this.load.image("foreground","foreground.png")}create(){this.setupAnimations(),this.scene.start(r)}setupAnimations(){_(this.game.anims,l,O),_(this.game.anims,l,j),_(this.game.anims,l,Z)}}class ne{constructor(e,s,i){t(this,"scene"),t(this,"text"),t(this,"active",!1),this.scene=e,this.text=this.scene.add.text(s,i,"Debug Panel (Press Q)",{fontSize:"24px",color:"#ffffff",backgroundColor:"rgba(0,0,0,0.7)",padding:{x:8,y:5},fixedWidth:500}),this.text.setOrigin(1,0),this.text.setScrollFactor(0),this.text.setDepth(100),this.text.setVisible(this.active)}toggle(){this.active=!this.active,this.text.setVisible(this.active)}update(e){if(!this.active)return;let t="Debug Panel (Q)\n-----------------\n";for(const s in e)if(Object.prototype.hasOwnProperty.call(e,s)){const i=e[s];t+="PlayerPos"===s&&"object"==typeof i?`${s}: x=${i.x}, y=${i.y}\n`:"number"==typeof i?`${s}: ${i}\n`:`${s}: ${JSON.stringify(i)}\n`}this.text.setText(t)}destroy(){this.text.destroy()}}class oe{constructor(e){t(this,"scene"),t(this,"text"),this.scene=e,this.text=this.scene.add.text(16,16,"Coins: 0 / 0",{fontFamily:"Roboto",fontSize:"36px",color:"#ffffff",stroke:"#000000",strokeThickness:3}).setScrollFactor(0).setDepth(100)}update(){this.text.setText(`Coins: ${A()} / ${w}`)}destroy(){this.text.destroy()}}class le{constructor(e){t(this,"scene"),t(this,"text"),this.scene=e,this.text=this.scene.add.text(16,70,"Level: 0",{fontFamily:"Roboto",fontSize:"36px",color:"#ffffff",stroke:"#000000",strokeThickness:3}).setScrollFactor(0).setDepth(100)}update(){this.text.setText("Level: "+P())}destroy(){this.text.destroy()}}class he extends i.Scene{constructor(){super(o),t(this,"debugPanel"),t(this,"coinUI"),t(this,"levelUI")}create(){var e;console.log("DebugUIScene created"),this.debugPanel=new ne(this,this.scale.width-10,10),this.coinUI=new oe(this),this.levelUI=new le(this);const t=this.scene.get(n);t&&(t.events.on("updateDebugData",this.handleDebugDataUpdate,this),this.events.on(i.Scenes.Events.SHUTDOWN,(()=>{console.log("DebugUIScene shutting down, removing listener"),t.events.off("updateDebugData",this.handleDebugDataUpdate,this),this.levelUI.destroy(),this.coinUI.destroy()}))),null==(e=this.input.keyboard)||e.on("keydown-Q",(()=>{this.debugPanel.toggle()}))}handleDebugDataUpdate(e){this.debugPanel.update(e)}update(){this.coinUI.update(),this.levelUI.update()}}const ce={type:Phaser.AUTO,width:1920,height:1080,parent:"game-container",backgroundColor:"#028af8",scale:{mode:Phaser.Scale.EXPAND,autoCenter:Phaser.Scale.CENTER_BOTH},physics:{default:"matter",matter:{gravity:{x:0,y:1}}},scene:[g,re,ae,se,he,ie]};new s.Game(ce);
